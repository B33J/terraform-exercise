------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_cloudfront_distribution.r2g_exam_distribution will be created
  + resource "aws_cloudfront_distribution" "r2g_exam_distribution" {
      + active_trusted_signers         = (known after apply)
      + aliases                        = [
          + "r2g.b33j.com",
        ]
      + arn                            = (known after apply)
      + caller_reference               = (known after apply)
      + comment                        = "r2g terraform exam"
      + default_root_object            = "index.html"
      + domain_name                    = (known after apply)
      + enabled                        = true
      + etag                           = (known after apply)
      + hosted_zone_id                 = (known after apply)
      + http_version                   = "http2"
      + id                             = (known after apply)
      + in_progress_validation_batches = (known after apply)
      + is_ipv6_enabled                = true
      + last_modified_time             = (known after apply)
      + price_class                    = "PriceClass_100"
      + retain_on_delete               = false
      + status                         = (known after apply)
      + wait_for_deployment            = true

      + default_cache_behavior {
          + allowed_methods        = [
              + "GET",
              + "HEAD",
            ]
          + cached_methods         = [
              + "GET",
              + "HEAD",
            ]
          + compress               = false
          + default_ttl            = 300
          + max_ttl                = 86400
          + min_ttl                = 0
          + target_origin_id       = "S3-r2g.b33j.com"
          + viewer_protocol_policy = "allow-all"

          + forwarded_values {
              + query_string = false

              + cookies {
                  + forward = "none"
                }
            }

          + lambda_function_association {
              + event_type   = "viewer-request"
              + include_body = false
              + lambda_arn   = (known after apply)
            }
        }

      + origin {
          + domain_name = (known after apply)
          + origin_id   = "S3-r2g.b33j.com"

          + s3_origin_config {
              + origin_access_identity = (known after apply)
            }
        }

      + restrictions {
          + geo_restriction {
              + restriction_type = "none"
            }
        }

      + viewer_certificate {
          + acm_certificate_arn      = "arn:aws:acm:us-east-1:298160158712:certificate/eeb0f171-0118-45ad-9e74-1b034c0db207"
          + minimum_protocol_version = "TLSv1.1_2016"
          + ssl_support_method       = "sni-only"
        }
    }

  # aws_cloudfront_origin_access_identity.r2g_oai will be created
  + resource "aws_cloudfront_origin_access_identity" "r2g_oai" {
      + caller_reference                = (known after apply)
      + cloudfront_access_identity_path = (known after apply)
      + comment                         = "r2g origin access identity"
      + etag                            = (known after apply)
      + iam_arn                         = (known after apply)
      + id                              = (known after apply)
      + s3_canonical_user_id            = (known after apply)
    }

  # aws_iam_policy_attachment.test_attach will be created
  + resource "aws_iam_policy_attachment" "test_attach" {
      + id         = (known after apply)
      + name       = "LambdaExecPolicy"
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      + roles      = (known after apply)
    }

  # aws_iam_role.iam_for_lambda will be created
  + resource "aws_iam_role" "iam_for_lambda" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = [
                              + "lambda.amazonaws.com",
                              + "edgelambda.amazonaws.com",
                            ]
                        }
                      + Sid       = "123"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "iam_for_lambda"
      + path                  = "/"
      + unique_id             = (known after apply)
    }

  # aws_lambda_function.lambda_redirect will be created
  + resource "aws_lambda_function" "lambda_redirect" {
      + arn                            = (known after apply)
      + filename                       = "index.zip"
      + function_name                  = "lambda_redirect_to_index"
      + handler                        = "index.handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + publish                        = true
      + qualified_arn                  = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "nodejs10.x"
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + timeout                        = 3
      + version                        = (known after apply)

      + tracing_config {
          + mode = (known after apply)
        }
    }

  # aws_route53_record.r2g_domain_record will be created
  + resource "aws_route53_record" "r2g_domain_record" {
      + allow_overwrite = (known after apply)
      + fqdn            = (known after apply)
      + id              = (known after apply)
      + name            = "r2g.b33j.com"
      + type            = "A"
      + zone_id         = "Z3NATKOP8FXRSI"

      + alias {
          + evaluate_target_health = false
          + name                   = (known after apply)
          + zone_id                = (known after apply)
        }
    }

  # aws_s3_bucket.r2g_exam_bucket will be created
  + resource "aws_s3_bucket" "r2g_exam_bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "r2g.b33j.com"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + versioning {
          + enabled    = (known after apply)
          + mfa_delete = (known after apply)
        }
    }

  # null_resource.upload_to_s3 will be created
  + resource "null_resource" "upload_to_s3" {
      + id = (known after apply)
    }

Plan: 8 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

This plan was saved to: terraform_plan

To perform exactly these actions, run the following command to apply:
    terraform apply "terraform_plan"

